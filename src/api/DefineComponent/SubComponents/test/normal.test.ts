import { Checking, type Test } from "hry-types";
import type { Bubbles, Composed } from "../../../RootComponent/CustomEvents/CustomEventsTag";
import type { SubComponentDoc } from "../../../SubComponent/SubComponentDoc";
import { DefineComponent } from "../..";

const SubDocIsAny = {} as SubComponentDoc<{
  a: number | Composed;
}>;

const NonEmptyRootDoc = {} as SubComponentDoc<{
  a: string | Bubbles | Composed;
}>;

// 1 组件时
DefineComponent({
  name: "test",
  subComponents: [SubDocIsAny, NonEmptyRootDoc],
});

// 2 页面时
DefineComponent({
  path: "/test/index/index",
  rootComponent: { isPage: true },
  subComponents: [SubDocIsAny, NonEmptyRootDoc],
});

const A = {} as { a: number | Composed; b: number | Composed };

const B = {} as { a: string | Composed; b: string | Composed };

const C = {} as { a: boolean | Composed; c: boolean | Composed };

const aaa = DefineComponent({
  name: "test",
  // 3 subComponents字段支持最多999个子组件
  subComponents: [
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
    B,
    B,
    C,
    A,
    B,
    C,
    A,
  ],
});
void aaa;
void Checking<typeof aaa, {
  customEvents: {
    test_a: string | number | boolean | Composed;
    test_b: string | number | Composed;
    test_c: boolean | Composed;
  };
}, Test.Pass>;
